// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sas-fe/grpc-token-middleware/pb (interfaces: TokenStoreClient,TSDaemonClient)

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	gomock "github.com/golang/mock/gomock"
	pb "github.com/sas-fe/grpc-token-middleware/pb"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockTokenStoreClient is a mock of TokenStoreClient interface
type MockTokenStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStoreClientMockRecorder
}

// MockTokenStoreClientMockRecorder is the mock recorder for MockTokenStoreClient
type MockTokenStoreClientMockRecorder struct {
	mock *MockTokenStoreClient
}

// NewMockTokenStoreClient creates a new mock instance
func NewMockTokenStoreClient(ctrl *gomock.Controller) *MockTokenStoreClient {
	mock := &MockTokenStoreClient{ctrl: ctrl}
	mock.recorder = &MockTokenStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTokenStoreClient) EXPECT() *MockTokenStoreClientMockRecorder {
	return m.recorder
}

// AddToken mocks base method
func (m *MockTokenStoreClient) AddToken(arg0 context.Context, arg1 *pb.TokenMsg, arg2 ...grpc.CallOption) (*pb.RpcStatus, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddToken", varargs...)
	ret0, _ := ret[0].(*pb.RpcStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToken indicates an expected call of AddToken
func (mr *MockTokenStoreClientMockRecorder) AddToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToken", reflect.TypeOf((*MockTokenStoreClient)(nil).AddToken), varargs...)
}

// DelToken mocks base method
func (m *MockTokenStoreClient) DelToken(arg0 context.Context, arg1 *pb.TokenMsg, arg2 ...grpc.CallOption) (*pb.RpcStatus, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DelToken", varargs...)
	ret0, _ := ret[0].(*pb.RpcStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelToken indicates an expected call of DelToken
func (mr *MockTokenStoreClientMockRecorder) DelToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelToken", reflect.TypeOf((*MockTokenStoreClient)(nil).DelToken), varargs...)
}

// GetAllTokens mocks base method
func (m *MockTokenStoreClient) GetAllTokens(arg0 context.Context, arg1 *pb.RpcRequest, arg2 ...grpc.CallOption) (*pb.Tokens, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllTokens", varargs...)
	ret0, _ := ret[0].(*pb.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTokens indicates an expected call of GetAllTokens
func (mr *MockTokenStoreClientMockRecorder) GetAllTokens(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTokens", reflect.TypeOf((*MockTokenStoreClient)(nil).GetAllTokens), varargs...)
}

// GetUsageTimes mocks base method
func (m *MockTokenStoreClient) GetUsageTimes(arg0 context.Context, arg1 *pb.TokenPeriodRequest, arg2 ...grpc.CallOption) (*pb.UsageTimes, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsageTimes", varargs...)
	ret0, _ := ret[0].(*pb.UsageTimes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsageTimes indicates an expected call of GetUsageTimes
func (mr *MockTokenStoreClientMockRecorder) GetUsageTimes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsageTimes", reflect.TypeOf((*MockTokenStoreClient)(nil).GetUsageTimes), varargs...)
}

// GetUserTokens mocks base method
func (m *MockTokenStoreClient) GetUserTokens(arg0 context.Context, arg1 *pb.UserRequest, arg2 ...grpc.CallOption) (*pb.Tokens, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserTokens", varargs...)
	ret0, _ := ret[0].(*pb.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTokens indicates an expected call of GetUserTokens
func (mr *MockTokenStoreClientMockRecorder) GetUserTokens(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTokens", reflect.TypeOf((*MockTokenStoreClient)(nil).GetUserTokens), varargs...)
}

// IncUsage mocks base method
func (m *MockTokenStoreClient) IncUsage(arg0 context.Context, arg1 *pb.Token, arg2 ...grpc.CallOption) (*pb.RpcStatus, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IncUsage", varargs...)
	ret0, _ := ret[0].(*pb.RpcStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncUsage indicates an expected call of IncUsage
func (mr *MockTokenStoreClientMockRecorder) IncUsage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncUsage", reflect.TypeOf((*MockTokenStoreClient)(nil).IncUsage), varargs...)
}

// RegenToken mocks base method
func (m *MockTokenStoreClient) RegenToken(arg0 context.Context, arg1 *pb.TokenMsg, arg2 ...grpc.CallOption) (*pb.RpcStatus, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegenToken", varargs...)
	ret0, _ := ret[0].(*pb.RpcStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegenToken indicates an expected call of RegenToken
func (mr *MockTokenStoreClientMockRecorder) RegenToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenToken", reflect.TypeOf((*MockTokenStoreClient)(nil).RegenToken), varargs...)
}

// TokenStatus mocks base method
func (m *MockTokenStoreClient) TokenStatus(arg0 context.Context, arg1 *pb.Token, arg2 ...grpc.CallOption) (*pb.TokenStatusMsg, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TokenStatus", varargs...)
	ret0, _ := ret[0].(*pb.TokenStatusMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenStatus indicates an expected call of TokenStatus
func (mr *MockTokenStoreClientMockRecorder) TokenStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenStatus", reflect.TypeOf((*MockTokenStoreClient)(nil).TokenStatus), varargs...)
}

// UpdateLimit mocks base method
func (m *MockTokenStoreClient) UpdateLimit(arg0 context.Context, arg1 *pb.TokenMsg, arg2 ...grpc.CallOption) (*pb.RpcStatus, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLimit", varargs...)
	ret0, _ := ret[0].(*pb.RpcStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLimit indicates an expected call of UpdateLimit
func (mr *MockTokenStoreClientMockRecorder) UpdateLimit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLimit", reflect.TypeOf((*MockTokenStoreClient)(nil).UpdateLimit), varargs...)
}

// UpdateUsage mocks base method
func (m *MockTokenStoreClient) UpdateUsage(arg0 context.Context, arg1 *pb.TokenMsg, arg2 ...grpc.CallOption) (*pb.RpcStatus, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUsage", varargs...)
	ret0, _ := ret[0].(*pb.RpcStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsage indicates an expected call of UpdateUsage
func (mr *MockTokenStoreClientMockRecorder) UpdateUsage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsage", reflect.TypeOf((*MockTokenStoreClient)(nil).UpdateUsage), varargs...)
}

// MockTSDaemonClient is a mock of TSDaemonClient interface
type MockTSDaemonClient struct {
	ctrl     *gomock.Controller
	recorder *MockTSDaemonClientMockRecorder
}

// MockTSDaemonClientMockRecorder is the mock recorder for MockTSDaemonClient
type MockTSDaemonClientMockRecorder struct {
	mock *MockTSDaemonClient
}

// NewMockTSDaemonClient creates a new mock instance
func NewMockTSDaemonClient(ctrl *gomock.Controller) *MockTSDaemonClient {
	mock := &MockTSDaemonClient{ctrl: ctrl}
	mock.recorder = &MockTSDaemonClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTSDaemonClient) EXPECT() *MockTSDaemonClientMockRecorder {
	return m.recorder
}

// CheckValidity mocks base method
func (m *MockTSDaemonClient) CheckValidity(arg0 context.Context, arg1 *pb.Token, arg2 ...grpc.CallOption) (*pb.Validity, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckValidity", varargs...)
	ret0, _ := ret[0].(*pb.Validity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckValidity indicates an expected call of CheckValidity
func (mr *MockTSDaemonClientMockRecorder) CheckValidity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckValidity", reflect.TypeOf((*MockTSDaemonClient)(nil).CheckValidity), varargs...)
}
